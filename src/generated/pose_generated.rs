// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pose {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum KeypointOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Keypoint<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Keypoint<'a> {
  type Inner = Keypoint<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Keypoint<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_CONFIDENCE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Keypoint { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KeypointArgs
  ) -> flatbuffers::WIPOffset<Keypoint<'bldr>> {
    let mut builder = KeypointBuilder::new(_fbb);
    builder.add_confidence(args.confidence);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Keypoint::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Keypoint::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn confidence(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Keypoint::VT_CONFIDENCE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Keypoint<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("confidence", Self::VT_CONFIDENCE, false)?
     .finish();
    Ok(())
  }
}
pub struct KeypointArgs {
    pub x: f32,
    pub y: f32,
    pub confidence: f32,
}
impl<'a> Default for KeypointArgs {
  #[inline]
  fn default() -> Self {
    KeypointArgs {
      x: 0.0,
      y: 0.0,
      confidence: 0.0,
    }
  }
}

pub struct KeypointBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KeypointBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Keypoint::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Keypoint::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_confidence(&mut self, confidence: f32) {
    self.fbb_.push_slot::<f32>(Keypoint::VT_CONFIDENCE, confidence, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KeypointBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KeypointBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Keypoint<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Keypoint<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Keypoint");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("confidence", &self.confidence());
      ds.finish()
  }
}
pub enum PoseFrameOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PoseFrame<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PoseFrame<'a> {
  type Inner = PoseFrame<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PoseFrame<'a> {
  pub const VT_KEYPOINTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PoseFrame { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PoseFrameArgs<'args>
  ) -> flatbuffers::WIPOffset<PoseFrame<'bldr>> {
    let mut builder = PoseFrameBuilder::new(_fbb);
    if let Some(x) = args.keypoints { builder.add_keypoints(x); }
    builder.finish()
  }


  #[inline]
  pub fn keypoints(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Keypoint<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Keypoint>>>>(PoseFrame::VT_KEYPOINTS, None)}
  }
}

impl flatbuffers::Verifiable for PoseFrame<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Keypoint>>>>("keypoints", Self::VT_KEYPOINTS, false)?
     .finish();
    Ok(())
  }
}
pub struct PoseFrameArgs<'a> {
    pub keypoints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Keypoint<'a>>>>>,
}
impl<'a> Default for PoseFrameArgs<'a> {
  #[inline]
  fn default() -> Self {
    PoseFrameArgs {
      keypoints: None,
    }
  }
}

pub struct PoseFrameBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PoseFrameBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_keypoints(&mut self, keypoints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Keypoint<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PoseFrame::VT_KEYPOINTS, keypoints);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PoseFrameBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PoseFrameBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PoseFrame<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PoseFrame<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PoseFrame");
      ds.field("keypoints", &self.keypoints());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PoseFrame`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pose_frame_unchecked`.
pub fn root_as_pose_frame(buf: &[u8]) -> Result<PoseFrame, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PoseFrame>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PoseFrame` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_pose_frame_unchecked`.
pub fn size_prefixed_root_as_pose_frame(buf: &[u8]) -> Result<PoseFrame, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PoseFrame>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PoseFrame` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pose_frame_unchecked`.
pub fn root_as_pose_frame_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PoseFrame<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PoseFrame<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PoseFrame` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pose_frame_unchecked`.
pub fn size_prefixed_root_as_pose_frame_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PoseFrame<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PoseFrame<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PoseFrame and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PoseFrame`.
pub unsafe fn root_as_pose_frame_unchecked(buf: &[u8]) -> PoseFrame {
  flatbuffers::root_unchecked::<PoseFrame>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PoseFrame and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PoseFrame`.
pub unsafe fn size_prefixed_root_as_pose_frame_unchecked(buf: &[u8]) -> PoseFrame {
  flatbuffers::size_prefixed_root_unchecked::<PoseFrame>(buf)
}
#[inline]
pub fn finish_pose_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PoseFrame<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_pose_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PoseFrame<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Pose

